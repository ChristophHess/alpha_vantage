var searchIndex = JSON.parse('{\
"alpha_vantage":{"doc":"Rust Client/Wrapper built for…","i":[[5,"set_api","alpha_vantage","Set API value which can be used for calling different module",null,[[],["apikey",3]]],[5,"set_with_timeout","","Set API value with timeout period",null,[[],["apikey",3]]],[5,"set_with_env","","Set out API Key reading out environment variable",null,[[],["apikey",3]]],[0,"crypto","","Module for crypto real time data",null,null],[3,"Entry","alpha_vantage::crypto","Struct which stores Crypto data",null,null],[3,"Crypto","","Struct which holds out Crypto currency information",null,null],[5,"crypto","","Function used to create a [Crypto][Crypto] struct.",null,[[["cryptofunction",4]]]],[8,"VecEntry","","trait which helps for performing some common operation on…",null,null],[10,"find","","Find a entry with a given time as a input return none if…",0,[[],[["entry",3],["option",4]]]],[10,"latest","","Return a entry which is of latest time period",0,[[],["entry",3]]],[10,"latestn","","Return a top n latest Entry if n Entry is present else…",0,[[],[["vec",3],["result",6]]]],[11,"time","","Return time",1,[[]]],[11,"market_open","","Return market open value",1,[[]]],[11,"usd_open","","Return usd open value",1,[[]]],[11,"market_high","","Return market high value",1,[[]]],[11,"usd_high","","Return usd high value",1,[[]]],[11,"market_low","","Return market low value",1,[[]]],[11,"usd_low","","Return usd low value",1,[[]]],[11,"market_close","","Return market close value",1,[[]]],[11,"usd_close","","Return usd close value",1,[[]]],[11,"volume","","Return volume",1,[[]]],[11,"market_cap","","Return market cap",1,[[]]],[11,"information","","Return meta data information",2,[[]]],[11,"digital_code","","Return digital currency code",2,[[]]],[11,"digital_name","","Return digital currency name",2,[[]]],[11,"market_code","","Return market code",2,[[]]],[11,"market_name","","Return market name",2,[[]]],[11,"last_refreshed","","Return last refreshed time",2,[[]]],[11,"time_zone","","Return time zone of all data time",2,[[]]],[11,"entry","","Return out a entry",2,[[],["vec",3]]],[0,"error","alpha_vantage","Module which contains all types of error for alpha vantage…",null,null],[4,"Error","alpha_vantage::error","Main error/failure enum",null,null],[13,"AlphaVantageInformation","","Error which is raised if information is returned instead…",3,null],[13,"AlphaVantageErrorMessage","","Error which is raised if error_message is raised instead…",3,null],[13,"DesiredNumberOfEntryNotPresent","","Error which is raised when desired number of entry is not…",3,null],[6,"Result","","Result type for alpha vantage crate",null,null],[0,"exchange","alpha_vantage","Module for exchange currency (both digital & physical…",null,null],[3,"Exchange","alpha_vantage::exchange","Struct used for exchanging currency",null,null],[5,"exchange","","Function used to create a [Exchange][Exchange] struct.",null,[[]]],[11,"rate","","Get Rate for exchange",4,[[]]],[11,"refreshed_time","","Get time when exchange rate was last refreshed along with…",4,[[]]],[11,"time_zone","","Return time zone of all data time",4,[[]]],[11,"code_from","","get from code from which exchange is performed",4,[[]]],[11,"name_from","","get from name from which exchange is performed",4,[[]]],[11,"code_to","","get to code from exchange",4,[[]]],[11,"name_to","","get to name from exchange",4,[[]]],[0,"forex","alpha_vantage","Module for Forex realtime and historical data",null,null],[3,"Entry","alpha_vantage::forex","Struct to store Entry value",null,null],[3,"Forex","","Struct to store Forex data after forex API call",null,null],[5,"forex","","Function used to create a [Forex][Forex] struct.",null,[[["forexfunction",4],["timeseriesinterval",4],["outputsize",4]]]],[8,"VecEntry","","trait which helps for performing some common operation on…",null,null],[10,"find","","Find a entry with a given time as a input return none if…",5,[[],[["entry",3],["option",4]]]],[10,"latest","","Return a entry which is of latest time period",5,[[],["entry",3]]],[10,"latestn","","Return a top n latest Entry if n Entry is present else…",5,[[],[["result",6],["vec",3]]]],[11,"time","","Return time for entry",6,[[]]],[11,"open","","Return open value",6,[[]]],[11,"high","","Return high value",6,[[]]],[11,"low","","Return low value",6,[[]]],[11,"close","","Return close value",6,[[]]],[11,"information","","Return information of data",7,[[]]],[11,"symbol_from","","Return from symbol",7,[[]]],[11,"symbol_to","","Return to symbol",7,[[]]],[11,"last_refreshed","","Return last refreshed time",7,[[]]],[11,"time_zone","","Return time zone of all data time",7,[[]]],[11,"interval","","Return out interval for intraday",7,[[],["option",4]]],[11,"output_size","","Return output size which can be full or compact",7,[[],["option",4]]],[11,"entry","","Method return Entry",7,[[],["vec",3]]],[0,"quote","alpha_vantage","Module for returning latest price and volume information",null,null],[3,"Quote","alpha_vantage::quote","Struct for storing Quote related information",null,null],[5,"quote","","Function used to create a [Quote][Quote] struct.",null,[[]]],[11,"open","","return open value",8,[[]]],[11,"high","","return high value",8,[[]]],[11,"low","","return low value",8,[[]]],[11,"price","","return price value",8,[[]]],[11,"volume","","return out a volume",8,[[]]],[11,"previous","","return previous",8,[[]]],[11,"change","","return change",8,[[]]],[11,"change_percent","","return change percent",8,[[]]],[11,"last_trading","","get last trading day",8,[[]]],[11,"symbol","","get symbol",8,[[]]],[0,"search","alpha_vantage","Module for searching specific symbol or companies",null,null],[3,"Search","alpha_vantage::search","struct for storing search method data",null,null],[3,"DataValue","","Struct which stores matches data for search keyword",null,null],[5,"search","","Function used to create a [Search][Search] struct.",null,[[]]],[11,"symbol","","Return symbol",9,[[]]],[11,"name","","Return name for symbol",9,[[]]],[11,"data_type","","Return data type",9,[[]]],[11,"region","","Return region of search entry",9,[[]]],[11,"market_open","","Return open value",9,[[]]],[11,"market_close","","Return close value",9,[[]]],[11,"time_zone","","Return time zone of symbol",9,[[]]],[11,"currency","","Return currency",9,[[]]],[11,"match_score","","Return match score",9,[[]]],[11,"result","","Return result of search",10,[[],["vec",3]]],[0,"sector","alpha_vantage","Module for sector",null,null],[3,"Data","alpha_vantage::sector","Store Sector data",null,null],[3,"Sector","","Stores sector data",null,null],[5,"sector","","Function used to create a [Sector][Sector] struct.",null,[[]]],[11,"rank","","Return rank",11,[[]]],[11,"utilities","","Return utilities score",11,[[]]],[11,"health_care","","Return health care score",11,[[]]],[11,"information_technology","","Return out information technology",11,[[]]],[11,"industrials","","Return industrials scores",11,[[]]],[11,"real_estate","","Return out real estate value",11,[[]]],[11,"consumer_staples","","Return consumer staples value",11,[[]]],[11,"consumer_discretionary","","Return out value for consumer discretionary",11,[[]]],[11,"financials","","Return out for financials",11,[[]]],[11,"communication_services","","Gives value of communication services",11,[[]]],[11,"materials","","Gives materials value",11,[[]]],[11,"energy","","Gives out energy data",11,[[]]],[11,"information","","Return sector information",12,[[]]],[11,"last_refreshed","","Return last refreshed time",12,[[]]],[11,"data","","Return vector of data",12,[[],["vec",3]]],[0,"stock_time","alpha_vantage","Module for stock time series",null,null],[3,"TimeSeries","alpha_vantage::stock_time","Struct for storing time series data",null,null],[3,"MetaData","","Struct for storing Meta Data value",null,null],[3,"Entry","","Struct for Entry value",null,null],[5,"stock_time","","Function used to create a [TimeSeries][TimeSeries] struct.",null,[[["stockfunction",4],["outputsize",4],["timeseriesinterval",4]]]],[8,"VecEntry","","trait which helps for performing some common operation on…",null,null],[10,"find","","Find a entry with a given time as a input return none if…",13,[[],[["entry",3],["option",4]]]],[10,"latest","","Return a entry which is of latest time period",13,[[],["entry",3]]],[10,"latestn","","Return a top n latest Entry if n Entry is present else…",13,[[],[["result",6],["vec",3]]]],[11,"information","","Return information present in meta data",14,[[]]],[11,"symbol","","Return symbol for which time series function is called",14,[[]]],[11,"last_refreshed","","Return last refreshed time",14,[[]]],[11,"time_zone","","Return time zone of all data time",14,[[]]],[11,"interval","","Time series interval between two consecutive data",14,[[],["option",4]]],[11,"output_size","","Output Size of intraday which can be either Full or compact",14,[[],["option",4]]],[11,"entry","","Return Entry",14,[[],["vec",3]]],[11,"time","","Get time",15,[[]]],[11,"open","","Return open",15,[[]]],[11,"high","","Return high",15,[[]]],[11,"low","","Return low",15,[[]]],[11,"close","","Return close",15,[[]]],[11,"adjusted","","Return adjusted",15,[[],["option",4]]],[11,"volume","","Return volume",15,[[]]],[11,"dividend","","Return dividend",15,[[],["option",4]]],[11,"split","","Return split dividend",15,[[],["option",4]]],[0,"technical_indicator","alpha_vantage","Module for Technical Indicator",null,null],[3,"Indicator","alpha_vantage::technical_indicator","Struct for indicator",null,null],[3,"DataCollector","","Struct for storing a data values",null,null],[4,"MetaDataValue","","Different representation of metadata value",null,null],[13,"Bool","","Boolean representation",16,null],[13,"Unsigned","","Unsigned integer representation",16,null],[13,"Signed","","Signed integer representation",16,null],[13,"Float","","Float representation",16,null],[13,"Text","","Text representation",16,null],[5,"technical_indicator","","Function used to create a [Indicator][Indicator] struct.",null,[[["utilindicator",4],["option",4],["vec",3],["technicalindicatorinterval",4],["option",4]]]],[11,"meta_data","","Return out meta data in hash form",17,[[],["hashmap",3]]],[11,"data","","Return data as a vector",17,[[],[["datacollector",3],["vec",3]]]],[11,"time","","Return out a time",18,[[]]],[11,"values","","Return values for Data",18,[[],["hashmap",3]]],[0,"user","alpha_vantage","Module for basic definition of user information like…",null,null],[3,"APIKey","alpha_vantage::user","Struct for initializing api key value as well as contain…",null,null],[11,"set_api","","Method for initializing [APIKey][APIKey] struct",19,[[]]],[11,"set_with_timeout","","Set API value with timeout period",19,[[]]],[11,"set_with_env","","Set out [APIKey][APIKey] by reading out environment variable",19,[[]]],[11,"update_timeout","","Update timeout for API key",19,[[]]],[11,"get_api","","Method to get api key",19,[[]]],[11,"get_timeout","","Get API timeout period",19,[[]]],[11,"crypto","","Crypto method for calling cryptography function",19,[[["cryptofunction",4]]]],[11,"exchange","","Method for exchanging currency value from one currency to…",19,[[]]],[11,"forex","","Forex method for calling stock time series",19,[[["forexfunction",4],["timeseriesinterval",4],["outputsize",4]]]],[11,"quote","","Method for returning Quote Struct",19,[[]]],[11,"search","","Search method for searching keyword or company # Example…",19,[[]]],[11,"sector","","Method for returning out a sector data as struct # Example…",19,[[]]],[11,"stock_time","","Stock time method for calling stock time series API #…",19,[[["stockfunction",4],["outputsize",4],["timeseriesinterval",4]]]],[11,"technical_indicator","","Technical indicator API caller method # Example `use…",19,[[["option",4],["technicalindicator",4],["vec",3],["technicalindicatorinterval",4],["option",4]]]],[0,"util","alpha_vantage","Utility module declaring enum for basic function and…",null,null],[4,"CryptoFunction","alpha_vantage::util","Enum for declaring function for crypto series by defining…",null,null],[13,"Daily","","returns the daily historical time series for a digital…",20,null],[13,"Weekly","","returns the weekly historical time series for a digital…",20,null],[13,"Monthly","","returns the monthly historical time series for a digital…",20,null],[4,"ForexFunction","","Enum for declaring function for forex function by defining…",null,null],[13,"IntraDay","","returns intraday time series (timestamp, open, high, low,…",21,null],[13,"Daily","","returns the daily time series (timestamp, open, high, low,…",21,null],[13,"Weekly","","returns the weekly time series (timestamp, open, high,…",21,null],[13,"Monthly","","returns the monthly time series (timestamp, open, high,…",21,null],[4,"OutputSize","","Enum for declaring output size of API call",null,null],[13,"Compact","","Return latest top 100 points recommended if no historical…",22,null],[13,"Full","","Returns full api data points recommended if a full…",22,null],[13,"None","","uses out default which is Compact",22,null],[4,"StockFunction","","Enum for declaring function for stock time series by…",null,null],[13,"IntraDay","","returns intraday time series (timestamp, open, high, low,…",23,null],[13,"Daily","","returns daily time series (date, daily open, daily high,…",23,null],[13,"DailyAdjusted","","returns daily time series (date, daily open, daily high,…",23,null],[13,"Weekly","","returns weekly time series (last trading day of each week,…",23,null],[13,"WeeklyAdjusted","","returns weekly adjusted time series (last trading day of…",23,null],[13,"Monthly","","returns monthly time series (last trading day of each…",23,null],[13,"MonthlyAdjusted","","returns monthly adjusted time series (last trading day of…",23,null],[4,"TechnicalIndicator","","Enum for declaring different optional value of Technical…",null,null],[13,"Acceleration","","The acceleration factor. Positive floats are accepted. By…",24,null],[13,"Fastdmatype","","Moving average type for the fastd moving average. By…",24,null],[13,"Fastdperiod","","The time period of the fastd moving average. Positive…",24,null],[13,"Fastkperiod","","The time period of the fastk moving average. Positive…",24,null],[13,"Fastlimit","","Positive floats are accepted. By default, fastlimit=0.01.",24,null],[13,"Fastmatype","","Moving average type for the faster moving average. By…",24,null],[13,"Fastperiod","","Positive integers are accepted. By default, fastperiod=12.",24,null],[13,"Matype","","Moving average type. By default, matype=0. Integers 0 - 8…",24,null],[13,"Maximum","","The acceleration factor maximum value. Positive floats are…",24,null],[13,"Nbdevdn","","The standard deviation multiplier of the lower band.…",24,null],[13,"Nbdevup","","The standard deviation multiplier of the upper band.…",24,null],[13,"Signalmatype","","Moving average type for the signal moving average. By…",24,null],[13,"Signalperiod","","Positive integers are accepted. By default, signalperiod=9.",24,null],[13,"Slowdmatype","","Moving average type for the slowd moving average. By…",24,null],[13,"Slowdperiod","","The time period of the slowd moving average. Positive…",24,null],[13,"Slowkmatype","","Moving average type for the slowk moving average. By…",24,null],[13,"Slowkperiod","","The time period of the slowk moving average. Positive…",24,null],[13,"Slowlimit","","Positive floats are accepted. By default, slowlimit=0.01.",24,null],[13,"Slowmatype","","Moving average type for the slower moving average. By…",24,null],[13,"Slowperiod","","Positive integers are accepted. By default, slowperiod=26.",24,null],[13,"Timeperiod1","","The first time period for the indicator. Positive integers…",24,null],[13,"Timeperiod2","","The second time period for the indicator. Positive…",24,null],[13,"Timeperiod3","","The third time period for the indicator. Positive integers…",24,null],[4,"TechnicalIndicatorInterval","","Enum for declaring interval for technical indicator",null,null],[13,"OneMin","","1 min interval",25,null],[13,"FiveMin","","5 min interval",25,null],[13,"FifteenMin","","15 min interval",25,null],[13,"ThirtyMin","","30 min interval",25,null],[13,"SixtyMin","","60 min interval",25,null],[13,"Daily","","daily interval",25,null],[13,"Weekly","","weekly interval",25,null],[13,"Monthly","","monthly interval",25,null],[4,"TimeSeriesInterval","","Enum for declaring interval for intraday time series",null,null],[13,"OneMin","","1 min interval",26,null],[13,"FiveMin","","5 min interval",26,null],[13,"FifteenMin","","15 min interval",26,null],[13,"ThirtyMin","","30 min interval",26,null],[13,"SixtyMin","","60 min interval",26,null],[13,"None","","no interval which applies for all time series expect…",26,null],[11,"from","alpha_vantage::crypto","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","alpha_vantage::error","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","alpha_vantage::exchange","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","alpha_vantage::forex","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","alpha_vantage::quote","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","alpha_vantage::search","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","alpha_vantage::sector","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","alpha_vantage::stock_time","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","alpha_vantage::technical_indicator","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","alpha_vantage::user","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","alpha_vantage::util","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"clone","alpha_vantage::crypto","",1,[[],["entry",3]]],[11,"clone","alpha_vantage::forex","",6,[[],["entry",3]]],[11,"clone","alpha_vantage::search","",9,[[],["datavalue",3]]],[11,"clone","alpha_vantage::sector","",11,[[],["data",3]]],[11,"clone","alpha_vantage::stock_time","",27,[[],["metadata",3]]],[11,"clone","","",15,[[],["entry",3]]],[11,"clone","alpha_vantage::util","",20,[[],["cryptofunction",4]]],[11,"clone","","",21,[[],["forexfunction",4]]],[11,"clone","","",22,[[],["outputsize",4]]],[11,"clone","","",23,[[],["stockfunction",4]]],[11,"clone","","",25,[[],["technicalindicatorinterval",4]]],[11,"clone","","",26,[[],["timeseriesinterval",4]]],[11,"default","alpha_vantage::crypto","",1,[[],["entry",3]]],[11,"default","","",2,[[],["crypto",3]]],[11,"default","alpha_vantage::exchange","",4,[[],["exchange",3]]],[11,"default","alpha_vantage::forex","",6,[[],["entry",3]]],[11,"default","","",7,[[],["forex",3]]],[11,"default","alpha_vantage::quote","",8,[[],["quote",3]]],[11,"default","alpha_vantage::search","",10,[[],["search",3]]],[11,"default","","",9,[[],["datavalue",3]]],[11,"default","alpha_vantage::sector","",11,[[],["data",3]]],[11,"default","","",12,[[],["sector",3]]],[11,"default","alpha_vantage::stock_time","",14,[[],["timeseries",3]]],[11,"default","","",27,[[],["metadata",3]]],[11,"default","","",15,[[],["entry",3]]],[11,"default","alpha_vantage::technical_indicator","",17,[[],["indicator",3]]],[11,"default","","",18,[[],["datacollector",3]]],[11,"fmt","alpha_vantage::crypto","",1,[[["formatter",3]],["result",6]]],[11,"fmt","alpha_vantage::error","",3,[[["formatter",3]],["result",6]]],[11,"fmt","alpha_vantage::forex","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","alpha_vantage::search","",9,[[["formatter",3]],["result",6]]],[11,"fmt","alpha_vantage::stock_time","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","alpha_vantage::technical_indicator","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","alpha_vantage::error","",3,[[["formatter",3]],["result",6]]],[11,"deserialize","alpha_vantage::search","",9,[[],["result",4]]],[11,"deserialize","alpha_vantage::technical_indicator","",16,[[],["result",4]]]],"p":[[8,"VecEntry"],[3,"Entry"],[3,"Crypto"],[4,"Error"],[3,"Exchange"],[8,"VecEntry"],[3,"Entry"],[3,"Forex"],[3,"Quote"],[3,"DataValue"],[3,"Search"],[3,"Data"],[3,"Sector"],[8,"VecEntry"],[3,"TimeSeries"],[3,"Entry"],[4,"MetaDataValue"],[3,"Indicator"],[3,"DataCollector"],[3,"APIKey"],[4,"CryptoFunction"],[4,"ForexFunction"],[4,"OutputSize"],[4,"StockFunction"],[4,"TechnicalIndicator"],[4,"TechnicalIndicatorInterval"],[4,"TimeSeriesInterval"],[3,"MetaData"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);