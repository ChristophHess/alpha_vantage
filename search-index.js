var N=null,E="",T="t",U="u",searchIndex={};
var R=["apikey","crypto","entry","result","alpha_vantage","exchange","time_zone","Return time zone of all data time produce error if API…","VecEntry","trait which helps for performing some common operation on…","Find a entry with a given time as a input return none if…","Return a entry which is of latest time period","Return a top n latest Entry if n Entry is present else…","information","last_refreshed","Return last refreshed time produce error if API returns…","interval","market_open","Return open value","market_close","Return close value","stock_time","outputsize","latestn","output_size","Return volume","option","technical_indicator","utilindicator","hashmap","set_with_timeout","Set API value with timeout period","cryptofunction","forexfunction","search","sector","stockfunction","timeseries","technicalindicator","indicator","IntraDay","returns intraday time series (timestamp, open, high, low,…","returns daily time series (date, daily open, daily high,…","Monthly","alpha_vantage::crypto","try_into","try_from","borrow_mut","alpha_vantage::exchange","type_id","to_owned","alpha_vantage::forex","clone_into","borrow","typeid","alpha_vantage::quote","alpha_vantage::search","alpha_vantage::sector","alpha_vantage::stock_time","alpha_vantage::technical_indicator","alpha_vantage::user","alpha_vantage::util","default","datacollector","datavalue","formatter","deserialize","Exchange","DataValue","TimeSeries","Indicator","DataCollector","CryptoFunction","ForexFunction","Interval","OutputSize","StockFunction","TechnicalIndicator","MetaData"];

searchIndex["alpha_vantage"]={"doc":"Rust Client/Wrapper built for…","i":[[5,"set_api",R[4],"Set API value which can be used for calling different module",N,[[["str"]],[R[0]]]],[5,R[30],E,R[31],N,[[["str"],["u64"]],[R[0]]]],[0,R[1],E,"Module for crypto real time data",N,N],[3,"Entry",R[44],"Struct which stores Crypto data",N,N],[3,"Crypto",E,"Struct which holds out Crypto currency information",N,N],[5,R[1],E,"Function used to create a [Crypto][Crypto] struct.",N,[[["str"],[R[32]]],[R[1]]]],[8,R[8],E,R[9],N,N],[10,"find",E,R[10],0,[[["self"],["str"]],[[R[2]],[R[26],[R[2]]]]]],[10,"latest",E,R[11],0,[[["self"]],[R[2]]]],[10,R[23],E,R[12],0,[[["self"],["usize"]],[[R[3],["vec","str"]],["str"],["vec",[R[2]]]]]],[11,"time",E,"Return time",1,[[["self"]],["str"]]],[11,R[17],E,"Return market open value",1,[[["self"]],["f64"]]],[11,"usd_open",E,"Return usd open value",1,[[["self"]],["f64"]]],[11,"market_high",E,"Return market high value",1,[[["self"]],["f64"]]],[11,"usd_high",E,"Return usd high value",1,[[["self"]],["f64"]]],[11,"market_low",E,"Return market low value",1,[[["self"]],["f64"]]],[11,"usd_low",E,"Return usd low value",1,[[["self"]],["f64"]]],[11,R[19],E,"Return market close value",1,[[["self"]],["f64"]]],[11,"usd_close",E,"Return usd close value",1,[[["self"]],["f64"]]],[11,"volume",E,R[25],1,[[["self"]],["f64"]]],[11,"market_cap",E,"Return market cap",1,[[["self"]],["f64"]]],[11,R[13],E,"Return meta data information produce error if API returns…",2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"digital_code",E,"Return digital currency code produce error if API returns…",2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"digital_name",E,"Return digital currency name produce error if API returns…",2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"market_code",E,"Return market code produce error if API returns error…",2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"market_name",E,"Return market name produce error if API returns error…",2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[14],E,R[15],2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[6],E,R[7],2,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[2],E,"Return out a entry produce error if API returns error…",2,[[["self"]],[[R[3],["vec","str"]],["str"],["vec",[R[2]]]]]],[0,R[5],R[4],"Module for exchange currency (both digital & physical…",N,N],[3,R[67],R[48],"Struct used for exchanging currency",N,N],[5,R[5],E,"Function used to create a [Exchange][Exchange] struct.",N,[[["str"]],[R[5]]]],[11,"rate",E,"Get Rate for exchange produce error if no rate is available",3,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"refreshed_time",E,"Get time when exchange rate was last refreshed along with…",3,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[6],E,R[7],3,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"code_from",E,"get from code from which exchange is performed",3,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"name_from",E,"get from name from which exchange is performed",3,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"code_to",E,"get to code from exchange",3,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"name_to",E,"get to name from exchange",3,[[["self"]],[["str"],[R[3],["str","str"]]]]],[0,"forex",R[4],"Module for Forex realtime and historical data",N,N],[3,"Entry",R[51],"Struct to store Entry value",N,N],[3,"Forex",E,"Struct to store Forex data after forex API call",N,N],[5,"forex",E,"Function used to create a [Forex][Forex] struct.",N,[[[R[22]],[R[16]],[R[33]],["str"]],["forex"]]],[8,R[8],E,R[9],N,N],[10,"find",E,R[10],4,[[["self"],["str"]],[[R[2]],[R[26],[R[2]]]]]],[10,"latest",E,R[11],4,[[["self"]],[R[2]]]],[10,R[23],E,R[12],4,[[["self"],["usize"]],[["vec",[R[2]]],["str"],[R[3],["vec","str"]]]]],[11,"time",E,"Return time for entry",5,[[["self"]],["str"]]],[11,"open",E,R[18],5,[[["self"]],["f64"]]],[11,"high",E,"Return high value",5,[[["self"]],["f64"]]],[11,"low",E,"Return low value",5,[[["self"]],["f64"]]],[11,"close",E,R[20],5,[[["self"]],["f64"]]],[11,R[13],E,"Return information of data",6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"symbol_from",E,"Return from symbol",6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"symbol_to",E,"Return to symbol",6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[14],E,R[15],6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[6],E,R[7],6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[16],E,"Return out interval for intraday",6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[24],E,"Return output size which can be full or compact",6,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[2],E,"Method return Entry",6,[[["self"]],[["vec",[R[2]]],["str"],[R[3],["vec","str"]]]]],[0,"quote",R[4],"Module for returning latest price and volume information",N,N],[3,"Quote",R[55],"Struct for storing Quote related information",N,N],[5,"quote",E,"Function used to create a [Quote][Quote] struct.",N,[[["str"]],["quote"]]],[11,"open",E,"return open value",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"high",E,"return high value",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"low",E,"return low value",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"price",E,"return price value",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"volume",E,"return out a volume",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"previous",E,"return previous",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"change",E,"return change",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"change_percent",E,"return change percent",7,[[["self"]],[[R[3],["f64","str"]],["f64"],["str"]]]],[11,"last_trading",E,"get last trading day",7,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"symbol",E,"get symbol",7,[[["self"]],[["str"],[R[3],["str","str"]]]]],[0,R[34],R[4],"Module for searching specific symbol or companies",N,N],[3,"Search",R[56],"struct for storing search method data",N,N],[3,R[68],E,"Struct which stores matches data for search keyword",N,N],[5,R[34],E,"Function used to create a [Search][Search] struct.",N,[[["str"]],[R[34]]]],[11,"symbol",E,"Return symbol",8,[[["self"]],["str"]]],[11,"name",E,"Return name for symbol",8,[[["self"]],["str"]]],[11,"data_type",E,"Return data type",8,[[["self"]],["str"]]],[11,"region",E,"Return region of search entry",8,[[["self"]],["str"]]],[11,R[17],E,R[18],8,[[["self"]],["str"]]],[11,R[19],E,R[20],8,[[["self"]],["str"]]],[11,R[6],E,"Return time zone of symbol",8,[[["self"]],["str"]]],[11,"currency",E,"Return currency",8,[[["self"]],["str"]]],[11,"match_score",E,"Return match score",8,[[["self"]],["f64"]]],[11,R[3],E,"Return result of search",9,[[["self"]],[["vec",[R[64]]],["str"],[R[3],["vec","str"]]]]],[0,R[35],R[4],"Module for sector",N,N],[3,"Data",R[57],"Store Sector data",N,N],[3,"Sector",E,"Stores sector data",N,N],[5,R[35],E,"Function used to create a [Sector][Sector] struct.",N,[[],[R[35]]]],[11,"rank",E,"Return rank",10,[[["self"]],["str"]]],[11,"utilities",E,"Return utilities score",10,[[["self"]],["str"]]],[11,"health_care",E,"Return health care score",10,[[["self"]],["str"]]],[11,"information_technology",E,"Return out information technology",10,[[["self"]],["str"]]],[11,"industrials",E,"Return industrials scores",10,[[["self"]],["str"]]],[11,"real_estate",E,"Return out real estate value",10,[[["self"]],["str"]]],[11,"consumer_staples",E,"Return consumer staples value",10,[[["self"]],["str"]]],[11,"consumer_discretionary",E,"Return out value for consumer discretionary",10,[[["self"]],["str"]]],[11,"financials",E,"Return out for financials",10,[[["self"]],["str"]]],[11,"communication_services",E,"Gives value of communication services",10,[[["self"]],["str"]]],[11,"materials",E,"Gives materials value",10,[[["self"]],["str"]]],[11,"energy",E,"Gives out energy data",10,[[["self"]],["str"]]],[11,R[13],E,"Return sector information",11,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[14],E,"Return last refreshed time",11,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"data",E,"Return vector of data in Result",11,[[["self"]],[[R[3],["vec","str"]],["vec",["data"]],["str"]]]],[0,R[21],R[4],"Module for stock time series",N,N],[3,R[69],R[58],"Struct for storing time series data",N,N],[3,R[78],E,"Struct for storing Meta Data value",N,N],[3,"Entry",E,"Struct for Entry value",N,N],[5,R[21],E,"Function used to create a [TimeSeries][TimeSeries] struct.",N,[[[R[36]],[R[22]],[R[16]],["str"]],[R[37]]]],[8,R[8],E,R[9],N,N],[10,"find",E,R[10],12,[[["self"],["str"]],[[R[2]],[R[26],[R[2]]]]]],[10,"latest",E,R[11],12,[[["self"]],[R[2]]]],[10,R[23],E,R[12],12,[[["self"],["usize"]],[["vec",[R[2]]],[R[3],["vec","str"]],["str"]]]],[11,R[13],E,"Return information present in meta data",13,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,"symbol",E,"Return symbol for which time series function is called",13,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[14],E,R[15],13,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[6],E,R[7],13,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[16],E,"Interval for which a time series intraday",13,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[24],E,"Output Size of intraday which can be either Full or compact",13,[[["self"]],[["str"],[R[3],["str","str"]]]]],[11,R[2],E,"Return Entry",13,[[["self"]],[["vec",[R[2]]],[R[3],["vec","str"]],["str"]]]],[11,"time",E,"Get time",14,[[["self"]],["str"]]],[11,"open",E,"Return open",14,[[["self"]],["f64"]]],[11,"high",E,"Return high",14,[[["self"]],["f64"]]],[11,"low",E,"Return low",14,[[["self"]],["f64"]]],[11,"close",E,"Return close",14,[[["self"]],["f64"]]],[11,"adjusted",E,"Return adjusted",14,[[["self"]],[[R[26],["f64"]],["f64"]]]],[11,"volume",E,R[25],14,[[["self"]],["f64"]]],[11,"dividend",E,"Return dividend",14,[[["self"]],[[R[26],["f64"]],["f64"]]]],[11,"split",E,"Return split dividend",14,[[["self"]],[[R[26],["f64"]],["f64"]]]],[0,R[27],R[4],"Module for Technical Indicator",N,N],[3,R[70],R[59],"Struct for indicator",N,N],[3,R[71],E,"Struct for storing a data values",N,N],[5,R[27],E,"Function used to create a [Indicator][Indicator] struct.",N,[[[R[28]],[R[26],["str"]],["str"],["vec",[R[28]]]],[R[39]]]],[11,"meta_data",E,"Return out meta data in hash form",15,[[["self"]],[[R[3],[R[29],"str"]],[R[29]],["str"]]]],[11,"data",E,"Return data as a vector inside result",15,[[["self"]],[["vec",[R[63]]],[R[3],["vec","str"]],["str"]]]],[11,"time",E,"Return out a time",16,[[["self"]],["str"]]],[11,"values",E,"Return values for Data",16,[[["self"]],[R[29]]]],[0,"user",R[4],"Module for basic definition of user information like…",N,N],[3,"APIKey",R[60],"Struct for initializing api key value as well as contain…",N,N],[11,"set_api",E,"Method for initializing [APIKey][APIKey] struct",17,[[["str"]],["self"]]],[11,R[30],E,R[31],17,[[["str"],["u64"]],["self"]]],[11,"set_with_env",E,"Set out [APIKey][APIKey] by reading out environment variable",17,[[["str"]],["self"]]],[11,"update_timeout",E,"Update timeout for API key",17,[[["self"],["u64"]]]],[11,"get_api",E,"Method to get api key",17,[[["self"]],["str"]]],[11,"get_timeout",E,"Get API timeout period",17,[[["self"]],["u64"]]],[11,R[1],E,"Crypto method for calling cryptography function",17,[[["self"],[R[32]],["str"]],[R[1]]]],[11,R[5],E,"Method for exchanging currency value from one currency to…",17,[[["self"],["str"]],[R[5]]]],[11,"forex",E,"Forex method for calling stock time series",17,[[["self"],[R[22]],[R[16]],[R[33]],["str"]],["forex"]]],[11,"quote",E,"Method for returning Quote Struct # Example `let api =…",17,[[["self"],["str"]],["quote"]]],[11,R[34],E,"Search method for searching keyword or company # Example…",17,[[["self"],["str"]],[R[34]]]],[11,R[35],E,"Method for returning out a sector data as struct # Example…",17,[[["self"]],[R[35]]]],[11,R[21],E,"Stock time method for calling stock time series API #…",17,[[["self"],[R[36]],[R[22]],[R[16]],["str"]],[R[37]]]],[11,R[27],E,"Technical indicator API caller method # Example `let api =…",17,[[["self"],["vec",[R[38]]],[R[38]],[R[26],["str"]],["str"]],[R[39]]]],[0,"util",R[4],"Utility module declaring enum for basic function and…",N,N],[4,R[72],R[61],"Enum for declaring function for crypto series by defining…",N,N],[13,"Daily",E,"returns the daily historical time series for a digital…",18,N],[13,"Weekly",E,"returns the weekly historical time series for a digital…",18,N],[13,R[43],E,"returns the monthly historical time series for a digital…",18,N],[4,R[73],E,"Enum for declaring function for forex function by defining…",N,N],[13,R[40],E,R[41],19,N],[13,"Daily",E,"returns the daily time series (timestamp, open, high, low,…",19,N],[13,"Weekly",E,"returns the weekly time series (timestamp, open, high,…",19,N],[13,R[43],E,"returns the monthly time series (timestamp, open, high,…",19,N],[4,R[74],E,"Enum for declaring interval for intraday time series",N,N],[13,"OneMin",E,"1 min interval",20,N],[13,"FiveMin",E,"5 min interval",20,N],[13,"FifteenMin",E,"15 min interval",20,N],[13,"ThirtyMin",E,"30 min interval",20,N],[13,"SixtyMin",E,"60 min interval",20,N],[13,"None",E,"no interval which applies for all time series expect…",20,N],[4,R[75],E,"Enum for declaring output size of API call",N,N],[13,"Compact",E,"Return latest top 100 points recommended if no historical…",21,N],[13,"Full",E,"Returns full api data points recommended if a full…",21,N],[13,"None",E,"uses out default which is Compact",21,N],[4,R[76],E,"Enum for declaring function for stock time series by…",N,N],[13,R[40],E,R[41],22,N],[13,"Daily",E,R[42],22,N],[13,"DailyAdjusted",E,R[42],22,N],[13,"Weekly",E,"returns weekly time series (last trading day of each week,…",22,N],[13,"WeeklyAdjusted",E,"returns weekly adjusted time series (last trading day of…",22,N],[13,R[43],E,"returns monthly time series (last trading day of each…",22,N],[13,"MonthlyAdjusted",E,"returns monthly adjusted time series (last trading day of…",22,N],[4,R[77],E,"Enum for declaring different optional value of Technical…",N,N],[13,"Acceleration",E,"The acceleration factor. Positive floats are accepted. By…",23,N],[13,"Fastdmatype",E,"Moving average type for the fastd moving average. By…",23,N],[13,"Fastdperiod",E,"The time period of the fastd moving average. Positive…",23,N],[13,"Fastkperiod",E,"The time period of the fastk moving average. Positive…",23,N],[13,"Fastlimit",E,"Positive floats are accepted. By default, fastlimit=0.01.",23,N],[13,"Fastmatype",E,"Moving average type for the faster moving average. By…",23,N],[13,"Fastperiod",E,"Positive integers are accepted. By default, fastperiod=12.",23,N],[13,"Matype",E,"Moving average type. By default, matype=0. Integers 0 - 8…",23,N],[13,"Maximum",E,"The acceleration factor maximum value. Positive floats are…",23,N],[13,"Nbdevdn",E,"The standard deviation multiplier of the lower band.…",23,N],[13,"Nbdevup",E,"The standard deviation multiplier of the upper band.…",23,N],[13,"Signalmatype",E,"Moving average type for the signal moving average. By…",23,N],[13,"Signalperiod",E,"Positive integers are accepted. By default, signalperiod=9.",23,N],[13,"Slowdmatype",E,"Moving average type for the slowd moving average. By…",23,N],[13,"Slowdperiod",E,"The time period of the slowd moving average. Positive…",23,N],[13,"Slowkmatype",E,"Moving average type for the slowk moving average. By…",23,N],[13,"Slowkperiod",E,"The time period of the slowk moving average. Positive…",23,N],[13,"Slowlimit",E,"Positive floats are accepted. By default, slowlimit=0.01.",23,N],[13,"Slowmatype",E,"Moving average type for the slower moving average. By…",23,N],[13,"Slowperiod",E,"Positive integers are accepted. By default, slowperiod=26.",23,N],[13,"Timeperiod1",E,"The first time period for the indicator. Positive integers…",23,N],[13,"Timeperiod2",E,"The second time period for the indicator. Positive…",23,N],[13,"Timeperiod3",E,"The third time period for the indicator. Positive integers…",23,N],[11,R[50],R[44],E,1,[[["self"]],[T]]],[11,R[52],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[46],E,E,1,[[[U]],[R[3]]]],[11,R[45],E,E,1,[[],[R[3]]]],[11,R[47],E,E,1,[[["self"]],[T]]],[11,R[53],E,E,1,[[["self"]],[T]]],[11,R[49],E,E,1,[[["self"]],[R[54]]]],[11,R[45],E,E,1,[[],[R[3]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[46],E,E,2,[[[U]],[R[3]]]],[11,R[45],E,E,2,[[],[R[3]]]],[11,R[47],E,E,2,[[["self"]],[T]]],[11,R[53],E,E,2,[[["self"]],[T]]],[11,R[49],E,E,2,[[["self"]],[R[54]]]],[11,R[45],E,E,2,[[],[R[3]]]],[11,"into",R[48],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[46],E,E,3,[[[U]],[R[3]]]],[11,R[45],E,E,3,[[],[R[3]]]],[11,R[47],E,E,3,[[["self"]],[T]]],[11,R[53],E,E,3,[[["self"]],[T]]],[11,R[49],E,E,3,[[["self"]],[R[54]]]],[11,R[45],E,E,3,[[],[R[3]]]],[11,R[50],R[51],E,5,[[["self"]],[T]]],[11,R[52],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[46],E,E,5,[[[U]],[R[3]]]],[11,R[45],E,E,5,[[],[R[3]]]],[11,R[47],E,E,5,[[["self"]],[T]]],[11,R[53],E,E,5,[[["self"]],[T]]],[11,R[49],E,E,5,[[["self"]],[R[54]]]],[11,R[45],E,E,5,[[],[R[3]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[46],E,E,6,[[[U]],[R[3]]]],[11,R[45],E,E,6,[[],[R[3]]]],[11,R[47],E,E,6,[[["self"]],[T]]],[11,R[53],E,E,6,[[["self"]],[T]]],[11,R[49],E,E,6,[[["self"]],[R[54]]]],[11,R[45],E,E,6,[[],[R[3]]]],[11,"into",R[55],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[46],E,E,7,[[[U]],[R[3]]]],[11,R[45],E,E,7,[[],[R[3]]]],[11,R[47],E,E,7,[[["self"]],[T]]],[11,R[53],E,E,7,[[["self"]],[T]]],[11,R[49],E,E,7,[[["self"]],[R[54]]]],[11,R[45],E,E,7,[[],[R[3]]]],[11,"into",R[56],E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[46],E,E,9,[[[U]],[R[3]]]],[11,R[45],E,E,9,[[],[R[3]]]],[11,R[47],E,E,9,[[["self"]],[T]]],[11,R[53],E,E,9,[[["self"]],[T]]],[11,R[49],E,E,9,[[["self"]],[R[54]]]],[11,R[45],E,E,9,[[],[R[3]]]],[11,R[50],E,E,8,[[["self"]],[T]]],[11,R[52],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[46],E,E,8,[[[U]],[R[3]]]],[11,R[45],E,E,8,[[],[R[3]]]],[11,R[47],E,E,8,[[["self"]],[T]]],[11,R[53],E,E,8,[[["self"]],[T]]],[11,R[49],E,E,8,[[["self"]],[R[54]]]],[11,R[45],E,E,8,[[],[R[3]]]],[11,R[50],R[57],E,10,[[["self"]],[T]]],[11,R[52],E,E,10,[[["self"],[T]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[46],E,E,10,[[[U]],[R[3]]]],[11,R[45],E,E,10,[[],[R[3]]]],[11,R[47],E,E,10,[[["self"]],[T]]],[11,R[53],E,E,10,[[["self"]],[T]]],[11,R[49],E,E,10,[[["self"]],[R[54]]]],[11,R[45],E,E,10,[[],[R[3]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[46],E,E,11,[[[U]],[R[3]]]],[11,R[45],E,E,11,[[],[R[3]]]],[11,R[47],E,E,11,[[["self"]],[T]]],[11,R[53],E,E,11,[[["self"]],[T]]],[11,R[49],E,E,11,[[["self"]],[R[54]]]],[11,R[45],E,E,11,[[],[R[3]]]],[11,"into",R[58],E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[46],E,E,13,[[[U]],[R[3]]]],[11,R[45],E,E,13,[[],[R[3]]]],[11,R[47],E,E,13,[[["self"]],[T]]],[11,R[53],E,E,13,[[["self"]],[T]]],[11,R[49],E,E,13,[[["self"]],[R[54]]]],[11,R[45],E,E,13,[[],[R[3]]]],[11,R[50],E,E,24,[[["self"]],[T]]],[11,R[52],E,E,24,[[["self"],[T]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[46],E,E,24,[[[U]],[R[3]]]],[11,R[45],E,E,24,[[],[R[3]]]],[11,R[47],E,E,24,[[["self"]],[T]]],[11,R[53],E,E,24,[[["self"]],[T]]],[11,R[49],E,E,24,[[["self"]],[R[54]]]],[11,R[45],E,E,24,[[],[R[3]]]],[11,R[50],E,E,14,[[["self"]],[T]]],[11,R[52],E,E,14,[[["self"],[T]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[46],E,E,14,[[[U]],[R[3]]]],[11,R[45],E,E,14,[[],[R[3]]]],[11,R[47],E,E,14,[[["self"]],[T]]],[11,R[53],E,E,14,[[["self"]],[T]]],[11,R[49],E,E,14,[[["self"]],[R[54]]]],[11,R[45],E,E,14,[[],[R[3]]]],[11,"into",R[59],E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[46],E,E,15,[[[U]],[R[3]]]],[11,R[45],E,E,15,[[],[R[3]]]],[11,R[47],E,E,15,[[["self"]],[T]]],[11,R[53],E,E,15,[[["self"]],[T]]],[11,R[49],E,E,15,[[["self"]],[R[54]]]],[11,R[45],E,E,15,[[],[R[3]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[46],E,E,16,[[[U]],[R[3]]]],[11,R[45],E,E,16,[[],[R[3]]]],[11,R[47],E,E,16,[[["self"]],[T]]],[11,R[53],E,E,16,[[["self"]],[T]]],[11,R[49],E,E,16,[[["self"]],[R[54]]]],[11,R[45],E,E,16,[[],[R[3]]]],[11,"into",R[60],E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[46],E,E,17,[[[U]],[R[3]]]],[11,R[45],E,E,17,[[],[R[3]]]],[11,R[47],E,E,17,[[["self"]],[T]]],[11,R[53],E,E,17,[[["self"]],[T]]],[11,R[49],E,E,17,[[["self"]],[R[54]]]],[11,R[45],E,E,17,[[],[R[3]]]],[11,R[50],R[61],E,18,[[["self"]],[T]]],[11,R[52],E,E,18,[[["self"],[T]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[46],E,E,18,[[[U]],[R[3]]]],[11,R[45],E,E,18,[[],[R[3]]]],[11,R[47],E,E,18,[[["self"]],[T]]],[11,R[53],E,E,18,[[["self"]],[T]]],[11,R[49],E,E,18,[[["self"]],[R[54]]]],[11,R[45],E,E,18,[[],[R[3]]]],[11,R[50],E,E,19,[[["self"]],[T]]],[11,R[52],E,E,19,[[["self"],[T]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[46],E,E,19,[[[U]],[R[3]]]],[11,R[45],E,E,19,[[],[R[3]]]],[11,R[47],E,E,19,[[["self"]],[T]]],[11,R[53],E,E,19,[[["self"]],[T]]],[11,R[49],E,E,19,[[["self"]],[R[54]]]],[11,R[45],E,E,19,[[],[R[3]]]],[11,R[50],E,E,20,[[["self"]],[T]]],[11,R[52],E,E,20,[[["self"],[T]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[46],E,E,20,[[[U]],[R[3]]]],[11,R[45],E,E,20,[[],[R[3]]]],[11,R[47],E,E,20,[[["self"]],[T]]],[11,R[53],E,E,20,[[["self"]],[T]]],[11,R[49],E,E,20,[[["self"]],[R[54]]]],[11,R[45],E,E,20,[[],[R[3]]]],[11,R[50],E,E,21,[[["self"]],[T]]],[11,R[52],E,E,21,[[["self"],[T]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[46],E,E,21,[[[U]],[R[3]]]],[11,R[45],E,E,21,[[],[R[3]]]],[11,R[47],E,E,21,[[["self"]],[T]]],[11,R[53],E,E,21,[[["self"]],[T]]],[11,R[49],E,E,21,[[["self"]],[R[54]]]],[11,R[45],E,E,21,[[],[R[3]]]],[11,R[50],E,E,22,[[["self"]],[T]]],[11,R[52],E,E,22,[[["self"],[T]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[46],E,E,22,[[[U]],[R[3]]]],[11,R[45],E,E,22,[[],[R[3]]]],[11,R[47],E,E,22,[[["self"]],[T]]],[11,R[53],E,E,22,[[["self"]],[T]]],[11,R[49],E,E,22,[[["self"]],[R[54]]]],[11,R[45],E,E,22,[[],[R[3]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[46],E,E,23,[[[U]],[R[3]]]],[11,R[45],E,E,23,[[],[R[3]]]],[11,R[47],E,E,23,[[["self"]],[T]]],[11,R[53],E,E,23,[[["self"]],[T]]],[11,R[49],E,E,23,[[["self"]],[R[54]]]],[11,R[45],E,E,23,[[],[R[3]]]],[11,R[62],R[44],E,1,[[],[R[2]]]],[11,R[62],E,E,2,[[],[R[1]]]],[11,R[62],R[51],E,5,[[],[R[2]]]],[11,R[62],E,E,6,[[],["forex"]]],[11,R[62],R[57],E,10,[[],["data"]]],[11,R[62],E,E,11,[[],[R[35]]]],[11,R[62],R[58],E,13,[[],[R[37]]]],[11,R[62],E,E,14,[[],[R[2]]]],[11,R[62],R[59],E,16,[[],[R[63]]]],[11,"clone",R[44],E,1,[[["self"]],[R[2]]]],[11,"clone",R[51],E,5,[[["self"]],[R[2]]]],[11,"clone",R[56],E,8,[[["self"]],[R[64]]]],[11,"clone",R[57],E,10,[[["self"]],["data"]]],[11,"clone",R[58],E,24,[[["self"]],["metadata"]]],[11,"clone",E,E,14,[[["self"]],[R[2]]]],[11,"clone",R[61],E,18,[[["self"]],[R[32]]]],[11,"clone",E,E,19,[[["self"]],[R[33]]]],[11,"clone",E,E,20,[[["self"]],[R[16]]]],[11,"clone",E,E,21,[[["self"]],[R[22]]]],[11,"clone",E,E,22,[[["self"]],[R[36]]]],[11,"fmt",R[44],E,1,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",R[48],E,3,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",R[51],E,5,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",E,E,6,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",R[55],E,7,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",R[56],E,9,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",E,E,8,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",R[58],E,13,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",E,E,24,[[["self"],[R[65]]],[R[3]]]],[11,"fmt",E,E,14,[[["self"],[R[65]]],[R[3]]]],[11,R[66],R[48],E,3,[[["__d"]],[R[3]]]],[11,R[66],R[55],E,7,[[["__d"]],[R[3]]]],[11,R[66],R[56],E,9,[[["__d"]],[R[3]]]],[11,R[66],E,E,8,[[["__d"]],[R[3]]]],[11,R[66],R[59],E,15,[[["__d"]],[R[3]]]]],"p":[[8,R[8]],[3,"Entry"],[3,"Crypto"],[3,R[67]],[8,R[8]],[3,"Entry"],[3,"Forex"],[3,"Quote"],[3,R[68]],[3,"Search"],[3,"Data"],[3,"Sector"],[8,R[8]],[3,R[69]],[3,"Entry"],[3,R[70]],[3,R[71]],[3,"APIKey"],[4,R[72]],[4,R[73]],[4,R[74]],[4,R[75]],[4,R[76]],[4,R[77]],[3,R[78]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);